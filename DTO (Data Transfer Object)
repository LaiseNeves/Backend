_____________________________________________________________________________________________________________________________________________________________________________________________________________________
DTO (Data Transfer Object) 
_____________________________________________________________________________________________________________________________________________________________________________________________________________________

---> Transportar dados entre camadas sem expor entidades interna

---> √© um dos padr√µes mais comuns no desenvolvimento de aplica√ß√µes modernas.

üîπ Ele ajuda a separar a camada de dom√≠nio da de apresenta√ß√£o, trazendo mais seguran√ßa, clareza e organiza√ß√£o no tr√°fego de dados.
üîπ Em arquiteturas RESTful, √© essencial para evitar expor diretamente as entidades do sistema.
üîπ Al√©m disso, torna a manuten√ß√£o mais simples e pode at√© melhorar a performance.

_____________________________________________________________________________________________________________________________________________________________________________________________________________________
O que √© um Objeto de Transfer√™ncia de Dados (DTO)?
Respostas: 
_____________________________________________________________________________________________________________________________________________________________________________________________________________________

***Um Objeto de Transfer√™ncia de Dados √© um objeto usado para encapsular dados e envi√°-los de um subsistema de um aplicativo para outro.

DTOs s√£o mais comumente usados ‚Äã‚Äãpela camada de Servi√ßos (...) para transferir dados entre ela e a camada de UI. (...) tamb√©m s√£o √≥timos modelos no padr√£o MVC.

Outro uso para DTOs pode ser encapsular par√¢metros para chamadas de m√©todos. Isso pode ser √∫til se um m√©todo receber mais de quatro ou cinco par√¢metros.

Ao usar o padr√£o DTO, voc√™ tamb√©m usaria montadores DTO. Os montadores s√£o usados ‚Äã‚Äãpara criar DTOs a partir de Objetos de Dom√≠nio e vice-versa.


---> Alguns frameworks ORM t√™m a capacidade de proje√ß√£o por meio do uso de interfaces ou classes adicionais. Assim, os reposit√≥rios podem retornar objetos View diretamente. 
Portanto, voc√™ n√£o precisa de uma transforma√ß√£o adicional.

Por exemplo, esta √© a nossa entidade Usu√°rio:

@Entity
public final class User {
    private String id;
    private String firstname;
    private String lastname;
    private String phone;
    private String fax;
    private String address;
    // Accessors ...
}
Mas voc√™ deve retornar uma lista paginada de usu√°rios que inclua apenas ID, nome e sobrenome. Depois, voc√™ pode criar um Objeto de Valor de Visualiza√ß√£o para proje√ß√£o ORM.

public final class UserListItemView {
    private String id;
    private String firstname;
    private String lastname;
    // Accessors ...
}
Voc√™ pode obter facilmente o resultado paginado da camada de reposit√≥rio. Gra√ßas ao Spring, voc√™ tamb√©m pode usar apenas interfaces para proje√ß√µes.

List<UserListItemView> find(Pageable pageable);


‚ú® Para mim, a melhor resposta para a pergunta sobre o que √© um DTO √© que os DTOs s√£o objetos simples que n√£o devem conter nenhuma l√≥gica de neg√≥cios ou implementa√ß√£o de m√©todos que exijam testes.‚ú®

  - Um objeto simples, usado para transportar dados entre diferentes camadas do sistema (por exemplo, entre a camada de servi√ßo e a de apresenta√ß√£o, ou entre cliente e servidor).
  - Normalmente cont√©m apenas atributos, construtores e getters/setters.
  - N√£o deve conter l√≥gica de neg√≥cios ‚Äî isso fica na camada de servi√ßo ou dom√≠nio.
  - Tamb√©m n√£o deve ter m√©todos complexos que necessitem de testes unit√°rios espec√≠ficos, j√° que a ideia √© que seja apenas um ‚Äúpacote de dados‚Äù.

Normalmente, seus modelos (usando o padr√£o MVC) s√£o modelos inteligentes e podem conter v√°rios/alguns m√©todos que realizam opera√ß√µes diferentes para aquele modelo espec√≠fico (n√£o l√≥gica de neg√≥cios, isso deve 
estar nos controladores). No entanto, ao transferir dados (por exemplo, chamando um endpoint REST ( GET// POSTqualquerqueseja) de algum lugar, ou consumindo um webservice usando SOA, etc.), voc√™ n√£o quer 
transmitir o objeto grande com c√≥digo que n√£o √© necess√°rio para o endpoint, pois isso consumir√° dados e tornar√° a transfer√™ncia mais lenta.

_____________________________________________________________________________________________________________________________________________________________________________________________________________________
Referencias Bibliograficas: 
_____________________________________________________________________________________________________________________________________________________________________________________________________________________

1. https://www.linkedin.com/posts/vsalessandra_dtos-activity-7366061682017640449-1TDn/?utm_source=share&utm_medium=member_desktop&rcm=ACoAACPsS3MB9M10JeKzPox2M0Xth-9ZxhU9yOg

2. https://stackoverflow.com/questions/1051182/what-is-a-data-transfer-object-dto 
