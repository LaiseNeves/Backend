__________________________________________________________________________________________________________________________________________________________________________________________________
O que é Swagger?
__________________________________________________________________________________________________________________________________________________________________________________________________

O Swagger é um conjunto de ferramentas de código aberto desenvolvido com base na especificação OpenAPI que pode ajudar você a projetar, construir, documentar e consumir APIs REST. 
As principais ferramentas do Swagger incluem:

- Swagger Editor – editor baseado em navegador onde você pode escrever definições OpenAPI.
- Swagger UI – renderiza definições OpenAPI como documentação interativa.
- Swagger Codegen – gera stubs de servidor e bibliotecas de cliente a partir de uma definição OpenAPI.
- Swagger Editor Next (beta) – editor baseado em navegador onde você pode escrever e revisar definições OpenAPI e AsyncAPI.
- Swagger Core – bibliotecas relacionadas a Java para criar, consumir e trabalhar com definições OpenAPI.
- Swagger Parser – biblioteca autônoma para analisar definições OpenAPI.
- Swagger APIDom – fornece uma estrutura única e unificadora para descrever APIs em várias linguagens de descrição e formatos de serialização.



A Especificação OpenAPI (anteriormente Especificação Swagger) é um formato de descrição de API para APIs REST. Um arquivo OpenAPI permite descrever toda a sua API, incluindo:

- Pontos de extremidade disponíveis ( /users) e operações em cada ponto de extremidade ( GET /users, POST /users)
- Parâmetros de operação Entrada e saída para cada operação
- Métodos de autenticação
- Informações de contato, licença, termos de uso e outras informações.
- As especificações da API podem ser escritas em YAML ou JSON. O formato é fácil de aprender e legível tanto para humanos quanto para máquinas. A especificação completa da OpenAPI pode ser 
  encontrada no GitHub: Especificação da OpenAPI 3.0.

__________________________________________________________________________________________________________________________________________________________________________________________________
Estrutura básica
__________________________________________________________________________________________________________________________________________________________________________________________________

Você pode escrever definições OpenAPI em YAML ou JSON .

Um exemplo de definição OpenAPI 3.0 escrita em YAML se parece com:

openapi: 3.0.4
info:
  title: Sample API
  description: Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
  version: 0.1.9

servers:
  - url: http://api.example.com/v1
    description: Optional server description, e.g. Main (production) server
  - url: http://staging-api.example.com
    description: Optional server description, e.g. Internal staging server for testing

paths:
  /users:
    get:
      summary: Returns a list of users.
      description: Optional extended description in CommonMark or HTML.
      responses:
        "200": # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string


Todos os nomes de palavras-chave diferenciam maiúsculas de minúsculas .

__________________________________________________________________________________________________________________________________________________________________________________________________
Metadados
__________________________________________________________________________________________________________________________________________________________________________________________________
Cada definição de API deve incluir a versão da Especificação OpenAPI na qual esta definição se baseia:

openapi: 3.0.4

A versão OpenAPI define a estrutura geral de uma definição de API – o que você pode documentar e como documentar. O OpenAPI 3.0 utiliza versionamento semântico com um número de versão de três 
partes. As versões disponíveis são 3.0.0, 3.0.1, 3.0.2, 3.0.3e 3.0.4; elas são funcionalmente as mesmas.

A infoseção contém informações da API: title, description(opcional), version:

info:
  title: Sample API
  description: Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
  version: 0.1.9

- title é o nome da sua API. descriptionsão informações estendidas sobre sua API. Pode ser multilinha e suporta o dialeto CommonMark do Markdown para representação em rich text. HTML é suportado na 
  medida em que é fornecido pelo CommonMark [...]

- version é uma string arbitrária que especifica a versão da sua API (não confunda com a revisão do arquivo ou a openapiversão). Você pode usar versionamento semântico como major.minor.patch ou uma 
  string arbitrária como 1.0-beta ou 2017-07-25 . 

- infotambém suporta outras palavras-chave para informações de contato, licença, termos de serviço e outros detalhes.


__________________________________________________________________________________________________________________________________________________________________________________________________
Servidores
__________________________________________________________________________________________________________________________________________________________________________________________________

- Esta server sseção especifica o servidor da API e a URL base. Você pode definir um ou vários servidores, como produção e sandbox.

servers:
  - url: http://api.example.com/v1
    description: Optional server description, e.g. Main (production) server
  - url: http://staging-api.example.com
    description: Optional server description, e.g. Internal staging server for testing

Todos os caminhos da API são relativos à URL do servidor. No exemplo acima, /userssignifica http://api.example.com/v1/usersou http://staging-api.example.com/users, dependendo do servidor utilizado. 
Para obter mais informações, consulte

__________________________________________________________________________________________________________________________________________________________________________________________________
Caminhos
__________________________________________________________________________________________________________________________________________________________________________________________________

✨ Esta pathsseção define endpoints individuais (caminhos) na sua API e os métodos HTTP (operações) suportados por esses endpoints. 
    Por exemplo, GET /userspode ser descrito como:

paths:
  /users:
    get:
      summary: Returns a list of users.
      description: Optional extended description in CommonMark or HTML
      responses:
        "200":
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string


__________________________________________________________________________________________________________________________________________________________________________________________________
Servidor de API e caminho base
__________________________________________________________________________________________________________________________________________________________________________________________________

- Todos os endpoints da API são relativos à URL base. Por exemplo, assumindo a URL base de https://api.example.com/v1, o /usersendpoint se refere a https://api.example.com/v1/users.

https://api.example.com/v1/users?role=admin&status=active
\________________________/\____/ \______________________/
server URL       endpoint    query parameters
path


No OpenAPI 3.0, você usa o serversarray para especificar uma ou mais URLs base para sua API. serverssubstitui as palavras-chave host, basePathe schemesusadas no OpenAPI 2.0. Cada servidor tem um urle um . 
opcional formatado em Markdown description.

servers:
  - url: https://api.example.com/v1    # The "url: " prefix is required

Você também pode ter vários servidores, por exemplo, produção e sandbox:

servers:
  - url: https://api.example.com/v1
    description: Production server (uses live data)
  - url: https://sandbox-api.example.com:8443/v1
    description: Sandbox server (uses test data)


__________________________________________________________________________________________________________________________________________________________________________________________________
Formato de URL do servidor
__________________________________________________________________________________________________________________________________________________________________________________________________

O formato de URL do servidor segue o RFC 3986 e geralmente se parece com isto:

scheme://host[:port][/path]

O host pode ser um nome ou endereço IP (IPv4 ou IPv6). Os esquemas de WebSocket ws:// e wss:// do OpenAPI 2.0 também são suportados no OpenAPI 3.0. Exemplos de URLs de servidor válidas:

https://api.example.com
https://api.example.com:8443/v1/reports
http://localhost:3025/v1
http://10.0.81.36/v1
ws://api.example.com/v1
wss://api.example.com/v1
/v1/reports
/
//api.example.com

Se a URL do servidor for relativa, ela será resolvida em relação ao servidor onde o arquivo de definição OpenAPI fornecido está hospedado (mais sobre isso abaixo ). Observação: a URL do 
servidor não deve incluir parâmetros de string de consulta. Por exemplo, isto é inválido:

https://api.example.com/v1?route=

Se a serversmatriz não for fornecida ou estiver vazia, o URL do servidor será definido por padrão como /:

servers:
  - url: /

__________________________________________________________________________________________________________________________________________________________________________________________________
Modelos de Servidores
__________________________________________________________________________________________________________________________________________________________________________________________________

- Qualquer parte da URL do servidor – esquema, nome do host ou suas partes, porta, subcaminho – pode ser parametrizada usando variáveis. As variáveis são indicadas por {chaves} na URL do servidor, 
  como a seguir:

servers:
  - url: https://{customerId}.saas-app.com:{port}/v2
    variables:
      customerId:
        default: demo
        description: Customer ID assigned by the service provider
      port:
        enum:
          - '443'
          - '8443'
        default: '443'

- Ao contrário dos parâmetros de caminho , as variáveis de servidor não usam um parâmetro schema

- Em vez disso, presume-se que sejam strings. As variáveis podem ter valores arbitrários ou podem ser restritas a um parâmetro enum.

- Em qualquer caso, um defaultvalor é necessário, que será usado se o cliente não o fornecer

- A variável descriptioné opcional, mas útil e suporta Markdown ( CommonMark ) para formatação de texto enriquecido. 


Casos de uso comuns para modelos de servidor:

* Especificando vários protocolos (como HTTP vs HTTPS).
* Aplicativos SaaS (hospedados) onde cada cliente tem seu próprio subdomínio.
* Servidores regionais em diferentes regiões geográficas (exemplo: Amazon Web Services).
* Definição de API única para APIs SaaS e locais.

-----------------------------------------------------
Exemplos HTTPS e HTTP
-----------------------------------------------------

servers:
  - url: http://api.example.com
  - url: https://api.example.com



Ou usando modelos:

servers:
  - url: '{protocol}://api.example.com'
    variables:
      protocol:
        enum:
          - http
          - https
        default: https

Observação: esses dois exemplos são semanticamente diferentes. O segundo exemplo define explicitamente o servidor HTTPS como default, enquanto o primeiro exemplo não possui um servidor padrão.

*************************************
Produção, Desenvolvimento e Encenação
*************************************

servers:
  - url: https://{environment}.example.com/v2
    variables:
      environment:
        default: api    # Production server
        enum:
          - api         # Production server
          - api.dev     # Development server
          - api.staging # Staging server


*************************************
SaaS e On-Premise
*************************************

servers:
  - url: "{server}/v1"
    variables:
      server:
        default: https://api.example.com # SaaS server


*************************************
Pontos finais regionais para diferentes áreas geográficas
*************************************

servers:
  - url: https://{region}.api.cognitive.microsoft.com
    variables:
      region:
        default: westus
        enum:
          - westus
          - eastus2
          - westcentralus
          - westeurope
          - southeastasia

__________________________________________________________________________________________________________________________________________________________________________________________________
Substituindo Servidores
__________________________________________________________________________________________________________________________________________________________________________________________________

A matriz global serverspode ser substituída no nível do caminho ou da operação. Isso é útil se alguns endpoints usarem um servidor ou caminho base diferente do restante da API. 
Exemplos comuns são:

- URL base diferente para operações de upload e download de arquivos,
- Pontos de extremidade obsoletos, mas ainda funcionais.

servers:
  - url: https://api.example.com/v1

paths:
  /files:
    description: File upload and download operations
    servers:
      - url: https://files.example.com
        description: Override base path for all operations with the /files path
    ...

/ping:
    get:
      servers:
        - url: https://echo.example.com
          description: Override base path for the GET /ping operation


__________________________________________________________________________________________________________________________________________________________________________________________________
URLs relativas
__________________________________________________________________________________________________________________________________________________________________________________________________


















